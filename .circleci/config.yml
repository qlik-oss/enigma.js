version: 2
jobs:
  build:
    working_directory: ~/enigma.js
    docker:
      - image: circleci/node:8.14.1
    environment:
      - NPM_CONFIG_LOGLEVEL=warn
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Lint source code
          command: npm run -s lint
      - run:
          name: Check if API specification should be updated
          command: |
            npm run scriptappy
            git diff --exit-code --name-only docs/api-spec.json
      - run:
          name: Create npm package
          command: |
            npm run -s build
            npm pack
            mv enigma*.tgz enigma.tgz
      - setup_remote_docker
      - run:
          name: Execute all tests
          command: |
            ENGINE_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/qlikcore/engine/tags/" | docker run -i stedolan/jq -r '."results"[0]["name"]' 2>/dev/null)
            echo "Will start Qlik Associative Engine version '$ENGINE_VERSION'"
            ENGINE_CONTAINER_ID=$(docker run -d qlikcore/engine:$ENGINE_VERSION -S AcceptEULA=yes)
            ENGINE_IP=$(docker inspect -f '{{ .NetworkSettings.IPAddress }}' $ENGINE_CONTAINER_ID)
            TEST_CONTAINER_ID=$(docker run -d node:8.11.1-alpine tail -f /dev/null)
            HOME_DIR=/home/circleci/enigma.js
            docker exec $TEST_CONTAINER_ID mkdir -p $HOME_DIR
            docker cp . $TEST_CONTAINER_ID:$HOME_DIR
            docker exec $TEST_CONTAINER_ID /bin/sh -c 'apk update && apk add --no-cache socat bash'
            docker exec -d $TEST_CONTAINER_ID /bin/bash -c "socat TCP-LISTEN:9076,fork TCP:$ENGINE_IP:9076"
            docker exec $TEST_CONTAINER_ID /bin/bash -c "cd $HOME_DIR && npm run test"
            docker exec $TEST_CONTAINER_ID /bin/bash -c "cd $HOME_DIR && test/examples/run.sh"
            if [ ! -z "$COVERALLS_REPO_TOKEN" ]; then
              docker cp $TEST_CONTAINER_ID:$HOME_DIR/coverage .
              echo "Uploading coverage results to coveralls.io..."
              cat ./coverage/lcov.info | npx coveralls
            fi
      - store_artifacts:
          path: coverage
